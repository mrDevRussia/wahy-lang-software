/**
 * Wahy Dual Mode - ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä ÿßŸÑŸÖÿ≠ÿØÿ´
 * ÿ™ÿ∑ÿ®ŸäŸÇ Ÿàÿ≠Ÿä ÿ≥ÿ∑ÿ≠ ÿßŸÑŸÖŸÉÿ™ÿ® ŸÖÿπ ÿØÿπŸÖ ÿßŸÑÿ£Ÿàÿ∂ÿßÿπ ÿßŸÑŸÖÿ™ÿπÿØÿØÿ©
 */

const { app, BrowserWindow, ipcMain, Menu, dialog } = require('electron');
const path = require('path');
const fs = require('fs');

// ÿßÿ≥ÿ™Ÿäÿ±ÿßÿØ ŸÖÿØŸäÿ± ÿßŸÑÿ£Ÿàÿ∂ÿßÿπ ŸàŸÜÿ∏ÿßŸÖ ÿßŸÑÿ≠ŸÖÿßŸäÿ©
const ModeManager = require('./core/mode-manager');
const ModeSelector = require('./core/ui/mode-selector');
const ProtectionManager = require('./system/license-guard/protection-manager');

class WahyDualModeApp {
    constructor() {
        this.mainWindow = null;
        this.modeManager = new ModeManager();
        this.modeSelector = null;
        this.protectionManager = new ProtectionManager();
        this.currentMode = null;
        this.appReady = false;
    }

    /**
     * ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ
     */
    async initialize() {
        try {
            // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ≠ŸÖÿßŸäÿ© ÿ£ŸàŸÑÿßŸã
            console.log('üîí ŸÅÿ≠ÿµ ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ≠ŸÖÿßŸäÿ©...');
            const securityCheck = await this.protectionManager.validateSecurity();
            
            if (!securityCheck.success) {
                console.error('‚ùå ŸÅÿ¥ŸÑ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿßŸÑÿ£ŸÖŸÜŸä:', securityCheck.error);
                this.showSecurityError(securityCheck);
                return false;
            }

            console.log('‚úÖ ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ≠ŸÖÿßŸäÿ© ŸäÿπŸÖŸÑ ÿ®ÿ¥ŸÉŸÑ ÿµÿ≠Ÿäÿ≠');
            console.log(`üìä ÿßŸÑŸÜŸÇÿßÿ∑ ÿßŸÑÿ£ŸÖŸÜŸäÿ©: ${securityCheck.score}/100`);

            // ÿ™ŸáŸäÿ¶ÿ© ŸÖÿØŸäÿ± ÿßŸÑÿ£Ÿàÿ∂ÿßÿπ
            console.log('üéØ ÿ™ŸáŸäÿ¶ÿ© ŸÖÿØŸäÿ± ÿßŸÑÿ£Ÿàÿ∂ÿßÿπ...');
            await this.setupModeManager();

            // ÿ•ÿπÿØÿßÿØ ÿßŸÑÿ£ÿ≠ÿØÿßÿ´
            this.setupEventHandlers();

            console.log('üöÄ ÿ™ŸÖ ÿ™ŸáŸäÿ¶ÿ© Wahy Dual Mode ÿ®ŸÜÿ¨ÿßÿ≠');
            return true;

        } catch (error) {
            console.error('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ:', error);
            this.showStartupError(error);
            return false;
        }
    }

    /**
     * ÿ•ÿπÿØÿßÿØ ŸÖÿØŸäÿ± ÿßŸÑÿ£Ÿàÿ∂ÿßÿπ
     */
    async setupModeManager() {
        // ÿ±ÿ®ÿ∑ ÿ£ÿ≠ÿØÿßÿ´ ŸÖÿØŸäÿ± ÿßŸÑÿ£Ÿàÿ∂ÿßÿπ
        this.modeManager.on('mode-switched', (data) => {
            console.log(`üîÑ ÿ™ŸÖ ÿßŸÑÿ™ÿ®ÿØŸäŸÑ ÿ•ŸÑŸâ Ÿàÿ∂ÿπ: ${data.currentMode}`);
            this.currentMode = data.currentMode;
            this.updateWindowTitle();
            this.updateMenu();
            
            // ÿ•ÿ¥ÿπÿßÿ± ÿßŸÑŸÜÿßŸÅÿ∞ÿ© ÿ®ÿßŸÑÿ™ÿ∫ŸäŸäÿ±
            if (this.mainWindow) {
                this.mainWindow.webContents.send('mode-changed', data);
            }
        });

        this.modeManager.on('mode-switch-error', (data) => {
            console.error('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ®ÿØŸäŸÑ ÿßŸÑŸàÿ∂ÿπ:', data);
            this.showModeError(data);
        });
    }

    /**
     * ÿ•ÿπÿØÿßÿØ ŸÖÿπÿßŸÑÿ¨ÿßÿ™ ÿßŸÑÿ£ÿ≠ÿØÿßÿ´
     */
    setupEventHandlers() {
        // ÿ£ÿ≠ÿØÿßÿ´ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ
        app.whenReady().then(async () => {
            await this.createMainWindow();
            this.appReady = true;
        });

        app.on('window-all-closed', () => {
            if (process.platform !== 'darwin') {
                this.shutdown();
            }
        });

        app.on('activate', async () => {
            if (BrowserWindow.getAllWindows().length === 0) {
                await this.createMainWindow();
            }
        });

        // ÿ£ÿ≠ÿØÿßÿ´ IPC
        this.setupIpcHandlers();
    }

    /**
     * ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÜÿßŸÅÿ∞ÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
     */
    async createMainWindow() {
        try {
            this.mainWindow = new BrowserWindow({
                width: 1400,
                height: 900,
                minWidth: 1000,
                minHeight: 700,
                webPreferences: {
                    nodeIntegration: true,
                    contextIsolation: false,
                    enableRemoteModule: true
                },
                titleBarStyle: 'default',
                icon: path.join(__dirname, 'assets', 'icon.png'),
                show: false // ÿ•ÿÆŸÅÿßÿ° ÿßŸÑŸÜÿßŸÅÿ∞ÿ© ÿ≠ÿ™Ÿâ ÿ™ŸÉÿ™ŸÖŸÑ ÿßŸÑÿ™ŸáŸäÿ¶ÿ©
            });

            // ÿ™ÿ≠ŸÖŸäŸÑ Ÿàÿßÿ¨Ÿáÿ© ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸàÿ∂ÿπ
            await this.loadModeSelector();

            // ÿπÿ±ÿ∂ ÿßŸÑŸÜÿßŸÅÿ∞ÿ© ÿ®ÿπÿØ ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ
            this.mainWindow.once('ready-to-show', () => {
                this.mainWindow.show();
                console.log('üé® ÿ™ŸÖ ÿπÿ±ÿ∂ ÿßŸÑŸÜÿßŸÅÿ∞ÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©');
            });

            // ŸÖÿπÿßŸÑÿ¨ÿ© ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸÜÿßŸÅÿ∞ÿ©
            this.mainWindow.on('closed', () => {
                this.mainWindow = null;
            });

            // ÿ•ÿπÿØÿßÿØ ÿßŸÑŸÇÿßÿ¶ŸÖÿ©
            this.updateMenu();

        } catch (error) {
            console.error('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÜÿßŸÅÿ∞ÿ©:', error);
            throw error;
        }
    }

    /**
     * ÿ™ÿ≠ŸÖŸäŸÑ Ÿàÿßÿ¨Ÿáÿ© ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸàÿ∂ÿπ
     */
    async loadModeSelector() {
        const htmlContent = `
        <!DOCTYPE html>
        <html lang="ar" dir="rtl">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Wahy Dual Mode - ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸàÿ∂ÿπ</title>
            <style>
                body {
                    margin: 0;
                    padding: 0;
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                .mode-selector {
                    background: white;
                    border-radius: 20px;
                    padding: 40px;
                    box-shadow: 0 25px 50px rgba(0,0,0,0.25);
                    max-width: 800px;
                    width: 90%;
                    text-align: center;
                }
                .logo {
                    font-size: 48px;
                    margin-bottom: 10px;
                }
                h1 {
                    background: linear-gradient(135deg, #667eea, #764ba2);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    margin: 0 0 10px 0;
                    font-size: 2.5em;
                }
                .subtitle {
                    color: #666;
                    margin-bottom: 40px;
                    font-size: 1.1em;
                }
                .modes-container {
                    display: grid;
                    grid-template-columns: 1fr 1fr;
                    gap: 30px;
                    margin-bottom: 40px;
                }
                .mode-card {
                    border: 2px solid #e0e0e0;
                    border-radius: 15px;
                    padding: 30px;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    background: white;
                }
                .mode-card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 15px 30px rgba(0,0,0,0.1);
                }
                .mode-card.web-dev:hover {
                    border-color: #3B82F6;
                    box-shadow: 0 15px 30px rgba(59, 130, 246, 0.2);
                }
                .mode-card.cyber:hover {
                    border-color: #EF4444;
                    box-shadow: 0 15px 30px rgba(239, 68, 68, 0.2);
                }
                .mode-icon {
                    font-size: 64px;
                    margin-bottom: 20px;
                }
                .mode-title {
                    font-size: 1.5em;
                    font-weight: bold;
                    margin-bottom: 10px;
                    color: #333;
                }
                .mode-description {
                    color: #666;
                    line-height: 1.6;
                    margin-bottom: 20px;
                }
                .mode-features {
                    display: flex;
                    justify-content: space-around;
                    margin-top: 15px;
                }
                .feature {
                    text-align: center;
                    font-size: 0.85em;
                    color: #888;
                }
                .feature-number {
                    display: block;
                    font-weight: bold;
                    font-size: 1.2em;
                    color: #333;
                }
                .start-button {
                    background: linear-gradient(135deg, #667eea, #764ba2);
                    color: white;
                    border: none;
                    padding: 15px 40px;
                    border-radius: 50px;
                    font-size: 1.1em;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.3s ease;
                }
                .start-button:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 10px 20px rgba(0,0,0,0.2);
                }
                .start-button:disabled {
                    background: #ccc;
                    cursor: not-allowed;
                    transform: none;
                    box-shadow: none;
                }
                .selected {
                    border-color: #667eea !important;
                    background: linear-gradient(135deg, rgba(102, 126, 234, 0.05), rgba(118, 75, 162, 0.05));
                    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
                }
            </style>
        </head>
        <body>
            <div class="mode-selector">
                <div class="logo">üöÄ</div>
                <h1>Wahy ŸàŸéÿ≠Ÿä</h1>
                <p class="subtitle">ÿßÿÆÿ™ÿ± Ÿàÿ∂ÿπ ÿßŸÑÿπŸÖŸÑ ÿßŸÑŸÖŸÜÿßÿ≥ÿ® ŸÑŸÖÿ¥ÿ±ŸàÿπŸÉ</p>
                
                <div class="modes-container">
                    <div class="mode-card web-dev" onclick="selectMode('web-dev')">
                        <div class="mode-icon">üåê</div>
                        <div class="mode-title">ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸàŸäÿ®</div>
                        <div class="mode-description">
                            ÿ•ŸÜÿ¥ÿßÿ° Ÿàÿ™ÿ∑ŸàŸäÿ± ŸÖŸàÿßŸÇÿπ ÿßŸÑŸàŸäÿ® ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÑÿ∫ÿ© Ÿàÿ≠Ÿä ŸÖÿπ ÿØÿπŸÖ HTMLÿå CSSÿå ŸàJavaScript
                        </div>
                        <div class="mode-features">
                            <div class="feature">
                                <span class="feature-number">3</span>
                                ŸÖŸÅÿ≥ÿ±ÿßÿ™
                            </div>
                            <div class="feature">
                                <span class="feature-number">5+</span>
                                ŸÖŸÉÿ™ÿ®ÿßÿ™
                            </div>
                            <div class="feature">
                                <span class="feature-number">250MB</span>
                                ÿ∞ÿßŸÉÿ±ÿ©
                            </div>
                        </div>
                    </div>
                    
                    <div class="mode-card cyber" onclick="selectMode('cybersecurity')">
                        <div class="mode-icon">üîí</div>
                        <div class="mode-title">ÿßŸÑÿ£ŸÖŸÜ ÿßŸÑÿ≥Ÿäÿ®ÿ±ÿßŸÜŸä</div>
                        <div class="mode-description">
                            ÿ£ÿØŸàÿßÿ™ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ£ŸÖŸÜŸä ŸàŸÅÿ≠ÿµ ÿßŸÑÿ¥ÿ®ŸÉÿßÿ™ Ÿàÿ≠ŸÖÿßŸäÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÑÿ∫ÿ© Ÿàÿ≠Ÿä
                        </div>
                        <div class="mode-features">
                            <div class="feature">
                                <span class="feature-number">4</span>
                                ÿ£ÿØŸàÿßÿ™ ŸÅÿ≠ÿµ
                            </div>
                            <div class="feature">
                                <span class="feature-number">6+</span>
                                ŸÖÿ≠ŸÑŸÑÿßÿ™
                            </div>
                            <div class="feature">
                                <span class="feature-number">300MB</span>
                                ÿ∞ÿßŸÉÿ±ÿ©
                            </div>
                        </div>
                    </div>
                </div>
                
                <button class="start-button" id="start-btn" disabled onclick="startSelectedMode()">
                    ÿßÿÆÿ™ÿ± Ÿàÿ∂ÿπÿßŸã ŸÑŸÑÿ®ÿØÿ°
                </button>
            </div>

            <script>
                let selectedMode = null;

                function selectMode(modeId) {
                    selectedMode = modeId;
                    
                    // ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿ≥ÿßÿ®ŸÇ
                    document.querySelectorAll('.mode-card').forEach(card => {
                        card.classList.remove('selected');
                    });
                    
                    // ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑŸàÿ∂ÿπ ÿßŸÑÿ¨ÿØŸäÿØ
                    document.querySelector('.' + (modeId === 'web-dev' ? 'web-dev' : 'cyber')).classList.add('selected');
                    
                    // ÿ™ŸÅÿπŸäŸÑ ÿ≤ÿ± ÿßŸÑÿ®ÿØÿ°
                    const startBtn = document.getElementById('start-btn');
                    startBtn.disabled = false;
                    startBtn.textContent = 'ÿ®ÿØÿ° Ÿàÿ∂ÿπ ' + (modeId === 'web-dev' ? 'ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸàŸäÿ®' : 'ÿßŸÑÿ£ŸÖŸÜ ÿßŸÑÿ≥Ÿäÿ®ÿ±ÿßŸÜŸä');
                }

                function startSelectedMode() {
                    if (selectedMode) {
                        // ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿßÿÆÿ™Ÿäÿßÿ± ŸÑŸÑÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä
                        if (window.require) {
                            const { ipcRenderer } = window.require('electron');
                            ipcRenderer.send('start-mode', selectedMode);
                        }
                    }
                }

                // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ¢ÿÆÿ± Ÿàÿ∂ÿπ ŸÖÿ≥ÿ™ÿÆÿØŸÖ
                try {
                    const lastMode = localStorage.getItem('wahy-last-mode');
                    if (lastMode) {
                        selectMode(lastMode);
                    }
                } catch (error) {
                    console.log('ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿ¢ÿÆÿ± Ÿàÿ∂ÿπ ŸÖÿ≥ÿ™ÿÆÿØŸÖ');
                }
            </script>
        </body>
        </html>`;

        // ÿ≠ŸÅÿ∏ ÿßŸÑŸÖŸÑŸÅ Ÿàÿ™ÿ≠ŸÖŸäŸÑŸá
        const tempHtmlPath = path.join(__dirname, 'temp-mode-selector.html');
        fs.writeFileSync(tempHtmlPath, htmlContent);
        
        await this.mainWindow.loadFile(tempHtmlPath);
        
        // ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑŸÖÿ§ŸÇÿ™
        setTimeout(() => {
            try {
                fs.unlinkSync(tempHtmlPath);
            } catch (error) {
                console.warn('ÿ™ÿπÿ∞ÿ± ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑŸÖÿ§ŸÇÿ™:', error.message);
            }
        }, 1000);
    }

    /**
     * ÿ•ÿπÿØÿßÿØ ŸÖÿπÿßŸÑÿ¨ÿßÿ™ IPC
     */
    setupIpcHandlers() {
        // ÿ®ÿØÿ° Ÿàÿ∂ÿπ ŸÖÿ≠ÿØÿØ
        ipcMain.handle('start-mode', async (event, modeId) => {
            try {
                await this.modeManager.switchMode(modeId);
                await this.loadModeInterface(modeId);
                return { success: true };
            } catch (error) {
                console.error('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ®ÿØÿ° ÿßŸÑŸàÿ∂ÿπ:', error);
                return { success: false, error: error.message };
            }
        });

        // ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ£ÿØÿßÿ°
        ipcMain.handle('get-performance-stats', () => {
            return this.modeManager.getPerformanceStats();
        });

        // ÿ™ÿ®ÿØŸäŸÑ ÿßŸÑŸàÿ∂ÿπ
        ipcMain.handle('switch-mode', async (event, modeId) => {
            try {
                await this.modeManager.switchMode(modeId);
                await this.loadModeInterface(modeId);
                return { success: true };
            } catch (error) {
                return { success: false, error: error.message };
            }
        });

        // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿ£Ÿàÿ∂ÿßÿπ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©
        ipcMain.handle('get-available-modes', () => {
            return this.modeManager.getAvailableModes();
        });
    }

    /**
     * ÿ™ÿ≠ŸÖŸäŸÑ Ÿàÿßÿ¨Ÿáÿ© ÿßŸÑŸàÿ∂ÿπ
     */
    async loadModeInterface(modeId) {
        const mode = this.modeManager.getCurrentMode();
        if (!mode) {
            throw new Error('ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿßŸÑŸàÿ∂ÿπ ÿßŸÑŸÖÿ≠ÿØÿØ');
        }

        // ÿ™ÿ≠ÿØŸäÿØ ŸÖÿ≥ÿßÿ± Ÿàÿßÿ¨Ÿáÿ© ÿßŸÑŸàÿ∂ÿπ
        const interfacePath = path.join(__dirname, 'modes', modeId, 'ui-components', 'main-interface.html');
        
        if (fs.existsSync(interfacePath)) {
            await this.mainWindow.loadFile(interfacePath);
        } else {
            // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ©
            await this.loadDefaultInterface(mode);
        }
        
        console.log(`üé® ÿ™ŸÖ ÿ™ÿ≠ŸÖŸäŸÑ Ÿàÿßÿ¨Ÿáÿ© Ÿàÿ∂ÿπ: ${mode.name}`);
    }

    /**
     * ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ©
     */
    async loadDefaultInterface(mode) {
        const htmlContent = this.generateDefaultInterface(mode);
        const tempPath = path.join(__dirname, `temp-${mode.id}-interface.html`);
        
        fs.writeFileSync(tempPath, htmlContent);
        await this.mainWindow.loadFile(tempPath);
        
        setTimeout(() => {
            try {
                fs.unlinkSync(tempPath);
            } catch (error) {
                console.warn('ÿ™ÿπÿ∞ÿ± ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑŸÖÿ§ŸÇÿ™:', error.message);
            }
        }, 1000);
    }

    /**
     * ÿ•ŸÜÿ™ÿßÿ¨ ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ©
     */
    generateDefaultInterface(mode) {
        return `
        <!DOCTYPE html>
        <html lang="ar" dir="rtl">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Wahy ${mode.name}</title>
            <style>
                body {
                    margin: 0;
                    padding: 0;
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: #f5f5f5;
                    height: 100vh;
                    display: flex;
                    flex-direction: column;
                }
                .header {
                    background: ${mode.color};
                    color: white;
                    padding: 15px 30px;
                    display: flex;
                    align-items: center;
                    gap: 15px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }
                .mode-icon {
                    font-size: 32px;
                }
                .mode-info h1 {
                    margin: 0;
                    font-size: 1.5em;
                }
                .mode-info p {
                    margin: 5px 0 0 0;
                    opacity: 0.9;
                    font-size: 0.9em;
                }
                .content {
                    flex: 1;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    padding: 40px;
                    text-align: center;
                }
                .welcome-message {
                    background: white;
                    padding: 50px;
                    border-radius: 20px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                    max-width: 600px;
                }
                .welcome-message h2 {
                    color: ${mode.color};
                    margin-top: 0;
                    font-size: 2em;
                }
                .features-list {
                    text-align: right;
                    margin: 30px 0;
                    color: #666;
                }
                .features-list li {
                    margin: 10px 0;
                    padding: 5px 0;
                }
                .status-info {
                    background: #e8f5e8;
                    border: 1px solid #c3e6c3;
                    border-radius: 8px;
                    padding: 15px;
                    margin-top: 20px;
                    color: #2e7d2e;
                }
            </style>
        </head>
        <body>
            <div class="header">
                <div class="mode-icon">${mode.icon}</div>
                <div class="mode-info">
                    <h1>Ÿàÿ∂ÿπ ${mode.name}</h1>
                    <p>${mode.description}</p>
                </div>
            </div>
            
            <div class="content">
                <div class="welcome-message">
                    <h2>ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÅŸä Ÿàÿ∂ÿπ ${mode.name}</h2>
                    <p>ÿ™ŸÖ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸàÿ∂ÿπ ÿ®ŸÜÿ¨ÿßÿ≠! ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿ¢ŸÜ ÿßŸÑÿ®ÿØÿ° ŸÅŸä ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ÿØŸàÿßÿ™ ŸàÿßŸÑŸÖŸÅÿ≥ÿ±ÿßÿ™ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©.</p>
                    
                    <div class="features-list">
                        <h3>ÿßŸÑŸÖŸÖŸäÿ≤ÿßÿ™ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©:</h3>
                        <ul>
                            ${mode.interpreters.map(interpreter => `<li>üìù ŸÖŸÅÿ≥ÿ± ${interpreter}</li>`).join('')}
                            ${mode.libraries.map(library => `<li>üìö ŸÖŸÉÿ™ÿ®ÿ© ${library}</li>`).join('')}
                        </ul>
                    </div>
                    
                    <div class="status-info">
                        <strong>‚úÖ ÿßŸÑÿ≠ÿßŸÑÿ©:</strong> ÿßŸÑŸàÿ∂ÿπ ŸÜÿ¥ÿ∑ ŸàŸÖŸèÿ≠ŸÖŸëŸÑ ÿ®ÿßŸÑŸÉÿßŸÖŸÑ<br>
                        <strong>üíæ ÿßŸÑÿ∞ÿßŸÉÿ±ÿ©:</strong> ${Math.round(mode.memoryLimit / 1024 / 1024)} MB ŸÖÿ≠ÿ¨Ÿàÿ≤ÿ©<br>
                        <strong>‚å®Ô∏è ÿßŸÑÿßÿÆÿ™ÿµÿßÿ±ÿßÿ™:</strong> ${mode.shortcuts.map(s => s.key).join(', ')}
                    </div>
                </div>
            </div>
            
            <script>
                // ŸäŸÖŸÉŸÜ ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸÜÿ∑ŸÇ JavaScript ŸáŸÜÿß ŸÑÿßÿ≠ŸÇÿßŸã
                console.log('ÿ™ŸÖ ÿ™ÿ≠ŸÖŸäŸÑ Ÿàÿ∂ÿπ ${mode.name} ÿ®ŸÜÿ¨ÿßÿ≠');
            </script>
        </body>
        </html>`;
    }

    /**
     * ÿ™ÿ≠ÿØŸäÿ´ ÿπŸÜŸàÿßŸÜ ÿßŸÑŸÜÿßŸÅÿ∞ÿ©
     */
    updateWindowTitle() {
        if (this.mainWindow && this.currentMode) {
            const mode = this.modeManager.getCurrentMode();
            this.mainWindow.setTitle(`Wahy ŸàŸéÿ≠Ÿä - ${mode.name}`);
        }
    }

    /**
     * ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÇÿßÿ¶ŸÖÿ©
     */
    updateMenu() {
        const template = [
            {
                label: 'ŸÖŸÑŸÅ',
                submenu: [
                    { label: 'ÿ¨ÿØŸäÿØ', accelerator: 'CmdOrCtrl+N', click: () => this.newProject() },
                    { label: 'ŸÅÿ™ÿ≠', accelerator: 'CmdOrCtrl+O', click: () => this.openProject() },
                    { label: 'ÿ≠ŸÅÿ∏', accelerator: 'CmdOrCtrl+S', click: () => this.saveProject() },
                    { type: 'separator' },
                    { label: 'ÿÆÿ±Ÿàÿ¨', accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q', click: () => this.shutdown() }
                ]
            },
            {
                label: 'ÿßŸÑÿ£Ÿàÿ∂ÿßÿπ',
                submenu: [
                    { label: 'ÿ™ÿ®ÿØŸäŸÑ ÿßŸÑŸàÿ∂ÿπ', accelerator: 'CmdOrCtrl+M', click: () => this.showModeSelector() },
                    { type: 'separator' },
                    { label: 'Ÿàÿ∂ÿπ ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸàŸäÿ®', click: () => this.switchToMode('web-dev') },
                    { label: 'Ÿàÿ∂ÿπ ÿßŸÑÿ£ŸÖŸÜ ÿßŸÑÿ≥Ÿäÿ®ÿ±ÿßŸÜŸä', click: () => this.switchToMode('cybersecurity') }
                ]
            },
            {
                label: 'ÿπÿ±ÿ∂',
                submenu: [
                    { label: 'ÿ•ÿπÿßÿØÿ© ÿ™ÿ≠ŸÖŸäŸÑ', accelerator: 'CmdOrCtrl+R', click: () => this.mainWindow.reload() },
                    { label: 'ÿ£ÿØŸàÿßÿ™ ÿßŸÑŸÖÿ∑Ÿàÿ±', accelerator: 'F12', click: () => this.mainWindow.toggleDevTools() },
                    { type: 'separator' },
                    { label: 'ÿ™ŸÉÿ®Ÿäÿ±', accelerator: 'CmdOrCtrl+Plus', click: () => this.zoomIn() },
                    { label: 'ÿ™ÿµÿ∫Ÿäÿ±', accelerator: 'CmdOrCtrl+-', click: () => this.zoomOut() },
                    { label: 'ÿ≠ÿ¨ŸÖ ÿπÿßÿØŸä', accelerator: 'CmdOrCtrl+0', click: () => this.resetZoom() }
                ]
            },
            {
                label: 'ŸÖÿ≥ÿßÿπÿØÿ©',
                submenu: [
                    { label: 'ÿØŸÑŸäŸÑ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ', click: () => this.showHelp() },
                    { label: 'ÿ≠ŸàŸÑ ÿßŸÑÿ®ÿ±ŸÜÿßŸÖÿ¨', click: () => this.showAbout() }
                ]
            }
        ];

        const menu = Menu.buildFromTemplate(template);
        Menu.setApplicationMenu(menu);
    }

    /**
     * ÿπÿ±ÿ∂ ÿÆÿ∑ÿ£ ÿßŸÑÿ£ŸÖÿßŸÜ
     */
    showSecurityError(securityResult) {
        dialog.showErrorBox(
            'ÿÆÿ∑ÿ£ ŸÅŸä ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ≠ŸÖÿßŸäÿ©',
            `ŸÅÿ¥ŸÑ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ≠ŸÖÿßŸäÿ©:\n\n${securityResult.error}\n\nÿßŸÑŸÜŸÇÿßÿ∑ ÿßŸÑÿ£ŸÖŸÜŸäÿ©: ${securityResult.score}/100\nÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ÿØŸÜŸâ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®: 70 ŸÜŸÇÿ∑ÿ©`
        );
        app.quit();
    }

    /**
     * ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ
     */
    async shutdown() {
        try {
            console.log('üîÑ ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ...');
            
            // ÿ•ÿ∫ŸÑÿßŸÇ ŸÖÿØŸäÿ± ÿßŸÑÿ£Ÿàÿ∂ÿßÿπ
            if (this.modeManager) {
                await this.modeManager.shutdown();
            }
            
            // ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ
            app.quit();
            
        } catch (error) {
            console.error('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ:', error);
            app.quit();
        }
    }

    // ÿØŸàÿßŸÑ ÿ•ÿ∂ÿßŸÅŸäÿ© ŸÑŸÑŸÇÿßÿ¶ŸÖÿ©
    newProject() { console.log('ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ¥ÿ±Ÿàÿπ ÿ¨ÿØŸäÿØ'); }
    openProject() { console.log('ŸÅÿ™ÿ≠ ŸÖÿ¥ÿ±Ÿàÿπ'); }
    saveProject() { console.log('ÿ≠ŸÅÿ∏ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ'); }
    showModeSelector() { this.loadModeSelector(); }
    async switchToMode(modeId) { 
        try {
            await this.modeManager.switchMode(modeId);
            await this.loadModeInterface(modeId);
        } catch (error) {
            console.error('ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ®ÿØŸäŸÑ ÿßŸÑŸàÿ∂ÿπ:', error);
        }
    }
    zoomIn() { this.mainWindow.webContents.setZoomLevel(this.mainWindow.webContents.getZoomLevel() + 0.5); }
    zoomOut() { this.mainWindow.webContents.setZoomLevel(this.mainWindow.webContents.getZoomLevel() - 0.5); }
    resetZoom() { this.mainWindow.webContents.setZoomLevel(0); }
    showHelp() { console.log('ÿπÿ±ÿ∂ ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ©'); }
    showAbout() { 
        dialog.showMessageBox(this.mainWindow, {
            type: 'info',
            title: 'ÿ≠ŸàŸÑ Wahy Dual Mode',
            message: 'Wahy ŸàŸéÿ≠Ÿä - Dual Mode v2.0',
            detail: 'ŸÑÿ∫ÿ© ÿßŸÑÿ®ÿ±ŸÖÿ¨ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ŸÖÿπ ÿØÿπŸÖ ÿ£Ÿàÿ∂ÿßÿπ ŸÖÿ™ÿπÿØÿØÿ©\nÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸàŸäÿ® ŸàÿßŸÑÿ£ŸÖŸÜ ÿßŸÑÿ≥Ÿäÿ®ÿ±ÿßŸÜŸä\n\nŸÖÿ∑Ÿàÿ± ÿ®Ÿàÿßÿ≥ÿ∑ÿ© ŸÅÿ±ŸäŸÇ Ÿàÿ≠Ÿä'
        });
    }
}

// ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ
const wahyApp = new WahyDualModeApp();

// ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ•ŸÖŸÉÿßŸÜŸäÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ
if (app.requestSingleInstanceLock()) {
    wahyApp.initialize().catch(error => {
        console.error('‚ùå ŸÅÿ¥ŸÑ ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ:', error);
        app.quit();
    });
} else {
    app.quit();
}

module.exports = WahyDualModeApp;